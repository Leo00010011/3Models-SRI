@page "/"

<PageTitle>SRI</PageTitle>

@if(add_corpus_path && !Load)
{

    <h1>Select one or more Collections📚 to begin </h1>
<div class="row justify-content-center">

<div class="card align-middle my-2" style="width: 18rem;">
  <div class="card-body">
        
        <div class="form-check form-switch my-1">
          <input class="form-check-input" type="checkbox" role="switch" @bind="selected_corpus_path[0]"  id="NGcol">
          <label class="form-check-label" for="NGcol">NewsGroup Collection</label>
        </div>

        <div class="form-check form-switch my-1">
          <input class="form-check-input" type="checkbox" role="switch" @bind="selected_corpus_path[1]"  id="Rcol">
          <label class="form-check-label" for="Rcol">Reuters Collection</label>
        </div>
    
        <div class="form-check form-switch my-1">
          <input class="form-check-input" type="checkbox" role="switch" @bind="selected_corpus_path[2]"  id="Ccol">
          <label class="form-check-label" for="Ccol">Cran Collection</label>
        </div>

    </div>

        <button type="default" class="btn btn-primary mt-1" @onclick="LoadCollections">Accept</button>
</div>
</div>
        



}
@if(!add_corpus_path && Load)
{
 

<div class="align-items-center">
  <h1 class="text-primary">Loading</h1>
  <div class="spinner-border ms-auto text-primary" role="status" aria-hidden="true"></div>
</div>
    
}
@if(!add_corpus_path && !Load)
{
    <h1>Hi👋, Welcome!</h1>

    <input class="p-1 my-1" @bind="query" placeholder="Introduzca su búsqueda">

    <button type="default" class="btn btn-primary mx-1" @onclick="RunQuery">🔍 Search</button>

    <div>
        <div class="form-check form-check-inline">
          <input @onchange="SRISelector" class="form-check-input" type="radio" name="inlineRadioOptions" id="inlineRadio1" value="1" checked>
          <label class="form-check-label" for="inlineRadio1">Vectorial Model</label>
        </div>

        <div class="form-check form-check-inline">
          <input class="form-check-input" type="radio" name="inlineRadioOptions" id="inlineRadio2" value="2" @onchange="SRISelector">
          <label class="form-check-label" for="inlineRadio2">Boolean Model</label>
        </div>
    
        <div class="form-check form-check-inline">
          <input class="form-check-input" type="radio" name="inlineRadioOptions" id="inlineRadio3" value="3" @onchange="SRISelector" >
          <label class="form-check-label" for="inlineRadio3">General Vectorial Model</label>
        </div>
    </div>

    @if (result != null)
    {
    
        @if(!string.IsNullOrEmpty(result.Suggestion))
        {
            <div class="suggestion">
                <p>Se han recuperado <strong>@result.Count</strong> documentos. ¿Quisite decir <strong><a @onclick="RunSuggestion" href="#">@result.Suggestion</a></strong>?</p>
            </div>
        }

        <ul class="results">

            @foreach (var item in (result.Select((value, index) => (index, value)).TakeWhile(x => x.value.Score > 0)).Take(15))
            {
                <li>
                    <div class="item">

                        <a class="title" href=@Concat(@item.index)  target="_blank">@item.value.Title</a>
                        <p>... @item.value.Snippet ...</p>
                </div>
                </li>
            }
        </ul>
    }
}

@code {
    private string query = "";
    private string [] corpus_path = new string []{"\\20news", "\\Reuters" ,"\\Cran"};
    private bool [] selected_corpus_path = new bool[]{true, false,false};
    
    private ISearchResult ? result;
    private IEnumerable<string> ? directories;
    private bool add_corpus_path=true;
 
    private bool vectorial = true;
    private bool boolean;
    private bool generalized_vectorial;

    private VSMTermDoc vectorialModel ;
    private BSMTermDoc booleanModel;
    private GVSMTermDoc generalizedModel;

    private IEnumerable<IDocument> docs = new LinkedList<IDocument>();
    private bool Load = false;

    private string Concat(int id)
    {
        return $"/Reader/Text/{id}";
    }
    private async Task LoadCollections()
    {
        bool temp =true;
        for (int i = 0; i < corpus_path.Length; i++)
        {
            if(selected_corpus_path[i])
            {
                temp = false;
                string temp_path = @"D:\Studio\SRI\3Models-SRI\contents"+corpus_path[i];
                directories = Utils.ReadAllFiles(temp_path);
                switch (i)
                {
                    case 0:
                    {
                        LinkedList<IDocument> d = new LinkedList<IDocument>();
                        foreach (var item in directories)
                        {
                            d.AddLast(new DP.Document(item, Parser.NewsgroupParser));
                        }
                        docs = d;
                        break;
                    }
                    case 1:
                    {
                        foreach (var item in directories)
                        {
                            docs = docs.Concat(new DP.CollectionSplitter(item, new DP.EndReutersMatcherCreator(), Parser.ReutersParser));
                        }
                        break;
                    }
                    case 2:
                    {
                        foreach (var item in directories)
                        {
                            docs = docs.Concat(new DP.CollectionSplitter(item, new DP.EndCranMatcherCreator(), Parser.CranParser));
                        }
                        break;
                    }
                }
               
            }
        }

        add_corpus_path = temp;
        Load = !temp;
        await Task.Run(()=> load());

    }

    private async Task load()
    {
        if(!add_corpus_path)
        {
            vectorialModel =  new VSMTermDoc(docs);
            booleanModel =  new BSMTermDoc(docs); 
            generalizedModel =  new GVSMTermDoc(docs); 
            Load = false;


        }
    }

    /// <summary>
    /// Este metodo settea en true el tipo de modelo SRI seleccionado en los radio buttons
    /// </summary>
    /// <param name="e"></param>
     private void SRISelector(ChangeEventArgs e) {

        if (e.Value is not null)
        {
            switch(e.Value)
            { 
                case "1":
                    vectorial = true;
                    boolean= false;
                    generalized_vectorial =false;
                    break;
                
                case "2":
                    vectorial = false;
                    boolean= true;
                    generalized_vectorial =false;
                    break;

                case "3":
                    vectorial = false;
                    boolean= false;
                    generalized_vectorial =true;
                    break;

            }
        }
    }
    

    /// <summary>
    /// Este metodo rehace la recuperacion de documentos a partir de la sugerencia de la busqueda anterior
    /// </summary>
    private void RunSuggestion() 
    {
        if(result !=null && !string.IsNullOrEmpty(result.Suggestion))
        {   
            query = result.Suggestion;
            RunQuery();
        }
    }

    /// <summary>
    /// Metodo para obtener los documentos relevantes a una consulta(query) segun el modelo de SRI correspondiente
    /// </summary>
    
    private void RunQuery() 
    {
        if(!string.IsNullOrEmpty(query) && directories!=null)
        {
           
            if(vectorial && vectorialModel != null)
            {

                result = new SearchResult(vectorialModel.Ranking(vectorialModel.GetSearchItems(vectorialModel.CreateQuery(query),300)),""); 
            }
            else if(boolean && booleanModel != null)
            {
                result = new SearchResult(booleanModel.Ranking(booleanModel.GetSearchItems(booleanModel.CreateQuery(query),300)),""); 
           
            }
            else if(generalized_vectorial && generalizedModel != null)
            {
                result = new SearchResult(generalizedModel.Ranking(generalizedModel.GetSearchItems(generalizedModel.CreateQuery(query),300)),""); 
           
            }
            else result= null;
            Date.results = result;
        }

    }
    
}
